### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type Comment {
  author: User
  content: String!
  id: ID!
  joke: Joke
}

input CommentCreateManyWithoutJokeInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutJokeInput!]
}

input CommentCreateWithoutJokeInput {
  author: UserCreateOneInput
  content: String!
  id: ID
}

enum CommentOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  joke: JokeWhereInput
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Joke {
  author: User
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]
  content: String!
  id: ID!
  published: Boolean!
}

input JokeCreateManyWithoutAuthorInput {
  connect: [JokeWhereUniqueInput!]
  create: [JokeCreateWithoutAuthorInput!]
}

input JokeCreateWithoutAuthorInput {
  comments: CommentCreateManyWithoutJokeInput
  content: String!
  id: ID
  published: Boolean
}

enum JokeOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input JokeWhereInput {
  AND: [JokeWhereInput!]
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_none: CommentWhereInput
  comments_some: CommentWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [JokeWhereInput!]
  OR: [JokeWhereInput!]
  published: Boolean
  published_not: Boolean
}

input JokeWhereUniqueInput {
  id: ID
}

type Mutation {
  createDraft(authorId: ID, title: String): Joke!
  createUser(data: UserCreateInput!): User!
  deleteJoke(where: JokeWhereUniqueInput!): Joke
  login(email: String, password: String): String
  publish(id: ID): Joke
  register(email: String, name: String, password: String): User!
}

type Query {
  commentsByUser(email: String): [Comment!]!
  feed: [Joke!]!
  joke(where: JokeWhereUniqueInput!): Joke
  jokesByUser(email: String): [Joke!]!
}

type User {
  email: String!
  id: ID!
  jokes(after: String, before: String, first: Int, last: Int, orderBy: JokeOrderByInput, skip: Int, where: JokeWhereInput): [Joke!]
  name: String!
  password: String!
}

input UserCreateInput {
  email: String!
  id: ID
  jokes: JokeCreateManyWithoutAuthorInput
  name: String!
  password: String!
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  jokes_every: JokeWhereInput
  jokes_none: JokeWhereInput
  jokes_some: JokeWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
